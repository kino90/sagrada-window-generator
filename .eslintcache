[{"C:\\Dev\\personal\\sagrada-window-generator\\src\\index.tsx":"1","C:\\Dev\\personal\\sagrada-window-generator\\src\\reportWebVitals.ts":"2","C:\\Dev\\personal\\sagrada-window-generator\\src\\App.tsx":"3","C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\About\\About.tsx":"4","C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\Layout\\Layout.tsx":"5","C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\WindowEditor\\WindowEditor.tsx":"6","C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\WindowEditor\\WindowEditor.utils.ts":"7","C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\WindowEditor\\Window\\Window.tsx":"8","C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\Wrapper\\Wrapper.tsx":"9"},{"size":500,"mtime":1607503966908,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1607503966911,"results":"12","hashOfConfig":"11"},{"size":696,"mtime":1607504630778,"results":"13","hashOfConfig":"11"},{"size":113,"mtime":1607503966898,"results":"14","hashOfConfig":"11"},{"size":174,"mtime":1607504539340,"results":"15","hashOfConfig":"11"},{"size":4356,"mtime":1607509703112,"results":"16","hashOfConfig":"11"},{"size":1406,"mtime":1607510309828,"results":"17","hashOfConfig":"11"},{"size":1659,"mtime":1607509716978,"results":"18","hashOfConfig":"11"},{"size":185,"mtime":1607507141228,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1laul0u",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Dev\\personal\\sagrada-window-generator\\src\\index.tsx",[],["41","42"],"C:\\Dev\\personal\\sagrada-window-generator\\src\\reportWebVitals.ts",[],"C:\\Dev\\personal\\sagrada-window-generator\\src\\App.tsx",[],"C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\About\\About.tsx",[],"C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\Layout\\Layout.tsx",[],"C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\WindowEditor\\WindowEditor.tsx",["43"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport Wrapper from \"../Wrapper/Wrapper\";\nimport Window from \"./Window/Window\";\nimport { TTile } from \"./windowEditor.types\";\nimport {\n  colors,\n  emptyTile,\n  isValidCombination,\n  numbers,\n  presets,\n  printDifficulty,\n} from \"./WindowEditor.utils\";\n\ninterface IParams {\n  currentCombination: string;\n  difficulty: string;\n  name: string;\n}\n\nconst TileEditor: React.FC = () => {\n  const { currentCombination, difficulty, name } = useParams<IParams>();\n  const history = useHistory();\n  const [tiles, setTiles] = useState<TTile[]>(\n    currentCombination && isValidCombination(currentCombination)\n      ? (currentCombination.split(\"\") as TTile[])\n      : emptyTile\n  );\n  const [selectedTile, setSelectedTile] = useState<TTile>(\"0\");\n  const [tileDifficulty, setTileDifficulty] = useState<number>(\n    Number(difficulty) ?? 3\n  );\n  const [tileName, setTileName] = useState<string>(name ? decodeURI(name) : \"\");\n\n  useEffect(() => {\n    let url = `/${tiles.join(\"\")}`;\n\n    if (tileDifficulty) {\n      url += `/${tileDifficulty}`;\n    }\n\n    if (tileName) {\n      url += `/${encodeURIComponent(tileName)}`;\n    }\n\n    history.replace(url);\n  }, [history, tiles, tileName, tileDifficulty]);\n\n  useEffect(() => {\n    if (\n      currentCombination &&\n      isValidCombination(currentCombination) &&\n      currentCombination !== tiles.join(\"\")\n    ) {\n      setTiles(currentCombination.split(\"\") as TTile[]);\n    }\n\n    if (difficulty) {\n      setTileDifficulty(Number(difficulty));\n    }\n\n    if (name) {\n      setTileName(decodeURIComponent(name));\n    }\n  }, [currentCombination, difficulty, name]);\n\n  const selectTile = (selectedTile: string) => () => {\n    if (selectedTile) {\n      setSelectedTile(selectedTile as TTile);\n    }\n  };\n\n  const setTileHandler = (id: number) => {\n    if (id || id === 0) {\n      setTiles((tiles: TTile[]) => {\n        const newTiles = [...tiles];\n        newTiles[id] = selectedTile;\n        return newTiles;\n      });\n    }\n  };\n\n  const difficultyChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value) {\n      const newValue = Number(e.target.value);\n      if (newValue >= 3 && newValue <= 6) {\n        setTileDifficulty(Number(e.target.value));\n      }\n    }\n  };\n\n  const nameChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value !== undefined) {\n      setTileName(e.target.value);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Sagrada Window Generator</h1>\n\n      <Wrapper>\n        Window Name: <br />\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={tileName}\n          onChange={nameChangeHandler}\n        />\n      </Wrapper>\n\n      <Wrapper>\n        Window Difficulty: <br />\n        <input\n          type=\"number\"\n          name=\"difficulty\"\n          min={3}\n          max={6}\n          value={tileDifficulty}\n          onChange={difficultyChangeHandler}\n        />\n      </Wrapper>\n\n      <Wrapper>\n        {Object.entries(colors).map(([k, v]) => (\n          <button\n            style={{\n              backgroundColor: k === selectedTile ? \"yellow\" : \"inherit\",\n            }}\n            key={k}\n            onClick={selectTile(k)}\n          >\n            {v}\n          </button>\n        ))}\n        {Object.entries(numbers).map(([k, v]) => (\n          <button\n            style={{\n              backgroundColor: k === selectedTile ? \"yellow\" : \"inherit\",\n            }}\n            key={k}\n            onClick={selectTile(k)}\n          >\n            {v}\n          </button>\n        ))}\n      </Wrapper>\n\n      <Wrapper>\n        <Window\n          name={tileName}\n          difficulty={tileDifficulty}\n          tiles={tiles}\n          onSetTile={setTileHandler}\n        />\n      </Wrapper>\n\n      <Wrapper>\n        <h2>Presets</h2>\n        <ul>\n          {presets.map((preset, i) => (\n            <li key={i}>\n              <Link\n                to={`/${preset.tiles}/${preset.difficulty}/${encodeURIComponent(\n                  preset.name\n                )}`}\n              >\n                {preset.name} {printDifficulty(preset.difficulty)}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </Wrapper>\n    </div>\n  );\n};\n\nexport default TileEditor;\n","C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\WindowEditor\\WindowEditor.utils.ts",[],"C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\WindowEditor\\Window\\Window.tsx",[],"C:\\Dev\\personal\\sagrada-window-generator\\src\\components\\Wrapper\\Wrapper.tsx",[],["44","45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":66,"column":6,"nodeType":"52","endLine":66,"endColumn":44,"suggestions":"53"},{"ruleId":"46","replacedBy":"54"},{"ruleId":"48","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tiles'. Either include it or remove the dependency array.","ArrayExpression",["58"],["56"],["57"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [currentCombination, difficulty, name, tiles]",{"range":"61","text":"62"},[1706,1744],"[currentCombination, difficulty, name, tiles]"]